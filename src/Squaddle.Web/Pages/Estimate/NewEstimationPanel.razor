@using Microsoft.Extensions.Configuration
@using Squaddle.Shared.Models;
@using Squaddle.Web.ViewModels;
 
@inject IConfiguration Configuration
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager

<BSCard Color="Color.Light">
    <BSCard CardType="CardType.Header">Estimation</BSCard>
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">Start estimating</BSCard>
        <BSCard CardType="CardType.Text">
            Planning poker is a way for agile teams to guide sprint planning and build accurate consensus estimates.
            <p>&nbsp;</p>
            <BSButton Color="Color.Primary" IsBlock="true" @onclick="ToggleNewEstimationSessionModal">Go</BSButton>
        </BSCard>
    </BSCard>
</BSCard>

<BSModal @ref="newEstimationSession" IsCentered="true">
    <BSForm Model="@newEstimationSessionViewModel" OnValidSubmit="@CreateNewEstimationSession"  ValidateOnInit="true" @ref="newEstimationSessionForm">
        <BSModalHeader OnClick="@ToggleNewEstimationSessionModal">Start a new estimation session</BSModalHeader>
        <BSModalBody>

            <DataAnnotationsValidator />
            <ValidationSummary />

            <BSFormGroup>
                <BSLabel For="@newEstimationSessionViewModel.RoomCreator.Name">Your Name</BSLabel>
                <BSInput Id="@newEstimationSessionViewModel.RoomCreator.Name" InputType="InputType.Text" PlaceHolder="Your name" @bind-Value="newEstimationSessionViewModel.RoomCreator.Name" ValidateOnChange="true" />
            </BSFormGroup>

            <BSFormGroup>
                <BSLabel For="@newEstimationSessionViewModel.Room.Name">Room Name</BSLabel>
                <BSInput Id="@newEstimationSessionViewModel.Room.Name" InputType="InputType.Text" PlaceHolder="Room name (e.g. Guardians of the Galaxy's Room)" @bind-Value="newEstimationSessionViewModel.Room.Name" ValidateOnChange="true" />
            </BSFormGroup>

        </BSModalBody>
        <BSModalFooter>
            <BSButton Color="Color.Secondary" @onclick="@ToggleNewEstimationSessionModal">Close</BSButton>
            <BSButton Color="Color.Primary" ButtonType="ButtonType.Submit" OnClick="@DoValidation">Start</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

<BSModal @ref="newEstimationSessionSuccess" IsCentered="true">   
        <BSModalHeader OnClick="@ToggleNewEstimationSessionSuccessModal">Session created</BSModalHeader>
        <BSModalBody>
            <p>Share the below link to invite your team</p>
            <p>@roomJoinUrl</p>
        </BSModalBody>
        <BSModalFooter>
            <BSButton Color="Color.Secondary" @onclick="@ToggleNewEstimationSessionSuccessModal">Close</BSButton>
            <BSButton Color="Color.Primary" @onclick="@JoinSession">Continue</BSButton>
        </BSModalFooter>    
</BSModal>

@code {
    private readonly HttpClient _httpClient = new HttpClient();
    private NewEstimationSessionViewModel newEstimationSessionViewModel = new NewEstimationSessionViewModel();
    private string roomJoinUrl = string.Empty;

    BSModal newEstimationSession;
    BSModal newEstimationSessionSuccess;
    BSForm newEstimationSessionForm;

    protected override void OnInitialized()
    {
        newEstimationSessionViewModel.RoomCreator.IsRoomOwner = true;
        newEstimationSessionViewModel.RoomCreator.RoomCode = "ROOMCODE";
    }

    void DoValidation()
    {
        newEstimationSessionForm.ForceValidate();
    }

    void ToggleNewEstimationSessionModal(MouseEventArgs e)
    {
        newEstimationSession.Toggle();
    }

    void ToggleNewEstimationSessionSuccessModal(MouseEventArgs e)
    {
        newEstimationSessionSuccess.Toggle();
    }

    async Task CreateNewEstimationSession()
    {
        newEstimationSessionViewModel.RoomCreator.IsRoomOwner = true;

        Room tRoom = new Room
        {
            Name = newEstimationSessionViewModel.Room.Name,
            RoomType = Squaddle.Shared.Resources.RoomType.ESTIMATION
        };

        string apiUrl = Configuration["sessionApiBaseUrl"];
        HttpResponseMessage roomResponse = await _httpClient.PostAsJsonAsync<Room>
            ($"{apiUrl}create", tRoom);

        Room room = await roomResponse.Content.ReadFromJsonAsync<Room>();


        newEstimationSessionViewModel.RoomCreator.RoomCode = room.RoomCode;


        await sessionStorage.SetItemAsync("User_Name", newEstimationSessionViewModel.RoomCreator.Name);
        await sessionStorage.SetItemAsync("User_RoomCode", newEstimationSessionViewModel.RoomCreator.RoomCode);
        await sessionStorage.SetItemAsync("User_IsRoomOwner", newEstimationSessionViewModel.RoomCreator.IsRoomOwner);

        await sessionStorage.SetItemAsync("Room_RoomType", newEstimationSessionViewModel.Room.RoomType);
        await sessionStorage.SetItemAsync("Room_EstimationStyleType", newEstimationSessionViewModel.Room.EstimationStyleType);

        roomJoinUrl = $"{NavigationManager.BaseUri}join/{newEstimationSessionViewModel.RoomCreator.RoomCode}";

        StateHasChanged();

        newEstimationSession.Toggle();
        newEstimationSessionSuccess.Toggle();
    }

    void JoinSession(MouseEventArgs e)
    {
        NavigationManager.NavigateTo(roomJoinUrl);
    }
}